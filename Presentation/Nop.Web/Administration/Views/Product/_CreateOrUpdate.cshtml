@model ProductModel

@using Nop.Core.Domain.Catalog;

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function () {
        bindBootstrapTabSelectEvent('product-edit');
    });
</script>

<div class="content">
    <div class="form-horizontal">        
        <div id="product-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.Catalog.Products.Info"), true)
                @if (!Model.IsLoggedInAsVendor)
                {
                @Html.RenderBootstrapTabHeader("tab-seo", @T("Admin.Common.SEO"))
                }
                @*@Html.RenderBootstrapTabHeader("tab-pictures", @T("Admin.Catalog.Products.Pictures"))*@
                
                @Html.RenderBootstrapTabHeader("tab-specification-attributes", @T("Admin.Catalog.Products.SpecificationAttributes"))                
                @if (Model.Id > 0)
                {
                    <!--如果不是电子票或电子卡则需要设置用户获取此电子卷时需要输入或选择的选项-->
                    if (Model.ProductTypeId != (int)ProductType.WiCoupon)
                    {
                    @Html.RenderBootstrapTabHeader("tab-product-attributes", @T("Admin.Catalog.Products.ProductAttributes"))
                    }
                    @Html.RenderBootstrapTabHeader("tab-purchased-with-orders", @T("Admin.Catalog.Products.PurchasedWithOrders"))
                    @Html.RenderBootstrapTabHeader("tab-stock-quantity-history", @T("Admin.Catalog.Products.StockQuantityHistory"))
                }
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                @if (!Model.IsLoggedInAsVendor)
                {
                @Html.RenderBootstrapTabContent("tab-seo", @TabSeo())
                }
                @*@Html.RenderBootstrapTabContent("tab-pictures", @TabPictures())*@
                @Html.RenderBootstrapTabContent("tab-specification-attributes", @TabSpecificationAttributes())
                @Html.RenderBootstrapTabContent("tab-product-attributes", @TabProductAttributes())
                @if (Model.Id > 0)
                {
                    @Html.RenderBootstrapTabContent("tab-purchased-with-orders", @TabPurchasedWithOrders())
                    @Html.RenderBootstrapTabContent("tab-stock-quantity-history", @TabStockQuantityHistory())
                }
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "product-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab name*@
<input type="hidden" id="selected-tab-name" name="selected-tab-name" value="@(Html.GetSelectedTabName())">

@helper TabInfo()
{
    @Html.Partial("_CreateOrUpdate.Info", Model)
}

@helper TabSeo()
{
    @Html.Partial("_CreateOrUpdate.SEO", Model)
}

@*@helper TabPictures()
{
    @Html.Partial("_CreateOrUpdate.Pictures", Model)
}*@

@helper TabProductAttributes()
{
    @Html.Partial("_CreateOrUpdate.ProductAttributes", Model)
}

@helper TabSpecificationAttributes()
{
    @Html.Partial("_CreateOrUpdate.SpecificationAttributes", Model)
}

@helper TabPurchasedWithOrders()
{
    @Html.Partial("_CreateOrUpdate.PurchasedWithOrders", Model)
}

@helper TabStockQuantityHistory()
{
    @Html.Partial("_CreateOrUpdate._StockQuantityHistory", Model)
}